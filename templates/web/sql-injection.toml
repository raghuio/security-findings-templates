[metadata]
finding_id = ""
title = "SQL Injection (SQLi)"
date_discovered = ""
date_reported = ""
assessment_id = ""
author = ""
client_id = ""
status = ""

[classification]
severity = "Critical"
cvss_score = 9.8
cvss_vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
cwe_id = ""
owasp_category = "A03:2021-Injection"

[affected_components]
system = ""
component = ""
version = ""
location = ""
endpoints = []

[details]
description = """
The OWASP guide [1] gives the following description for SQL Injection:
A SQL injection attack consists of insertion or "injection" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands."""
impact = ""

[reproduction]
steps = [
    "Identify an input parameter that is used in a SQL query (e.g., URL parameter, form field).",
    "Attempt to inject SQL meta-characters (e.g., ', \", --, OR 1=1) to manipulate the query's logic.",
    "Observe the application's response for errors, unexpected data disclosure, or modified behavior, indicating successful injection."
]
payload = ""

[proof_of_concept]
code = ""
curl_command = ""

[remediation]
recommendation = """
The following is recommended to prevent SQL Injection:
  - Use of Prepared Statements (Parameterized Queries)
  - Use of Stored Procedures
  - Never trust user input, Escaping all User Supplied Input"""

[references]
cve_ids = []
external_references = [
    "https://www.owasp.org/index.php/SQL_Injection"
]
