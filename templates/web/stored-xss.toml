[metadata]
finding_id = ""
title = "Stored Cross-Site Scripting (XSS)"
date_discovered = ""
date_reported = ""
assessment_id = ""
author = ""
client_id = ""
status = ""

[classification]
severity = "High"
cvss_score = 7.2
cvss_vector = "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N"
cwe_id = ""
owasp_category = "A03:2021-Injection"

[affected_components]
system = ""
component = ""
version = ""
location = ""
endpoints = []

[details]
description = """
The OWASP guide [1] gives the following description for Cross-Site Scripting:
Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.
An attacker can use XSS to send a malicious script to an unsuspecting user. The end userâ€™s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page."""
impact = ""

[reproduction]
steps = [
    "Identify an input field that stores and reflects user-supplied data without proper sanitization (e.g., comment section, user profile).",
    "Inject a malicious script payload (e.g., <script>alert('XSS')</script>) into the input field.",
    "Submit the input.",
    "Observe that the script executes when the page displaying the stored data is loaded by any user."
]
payload = ""

[proof_of_concept]
code = ""
curl_command = ""

[remediation]
recommendation = """
The following is recommended to remediate XSS vulnerabilities:
  - Never trust user input
  - Never insert untrusted data except in allowed locations
  - HTML escape before inserting untrusted data into HTML element content
  - Use whitelists in place for Black lists for input filtering"""

[references]
cve_ids = []
external_references = [
    "https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)"
]
