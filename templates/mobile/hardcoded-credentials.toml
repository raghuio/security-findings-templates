# Master Vulnerability Finding Template
# Format: TOML (Tom's Obvious Minimal Language)
# Version: 1.0.0
# Description: Generic vulnerability finding template for cross-language compatibility

[metadata]
finding_id = ""
title = "Mobile Hardcoded Credentials/Secrets"
date_discovered = ""
date_reported = ""
assessment_id = ""
author = ""
reviewer = ""
client_id = ""
status = ""
confidentiality = ""

[classification]
severity = "High" # Can be Critical if the credentials provide significant access
cvss_score = 7.5 # Example: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N (Disclosure of hardcoded API keys)
cvss_vector = "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
cwe_id = "" # e.g., CWE-798: Use of Hard-coded Credentials
cwe_name = ""
owasp_category = "M5: Insufficient Cryptography" # OWASP Mobile Top 10 2016 (often related to how keys for crypto are stored) or M2: Insecure Data Storage

[affected_components]
system = "" # e.g., Android, iOS
component = "" # e.g., Specific app name
version = ""
location = "" # e.g., Source code files (Java, Swift, Obj-C, C++), configuration files, resource files
endpoints = []
technologies = []

[details]
description = ""
impact = ""
root_cause = ""

[reproduction]
preconditions = ""
steps = [
    "Decompile or reverse engineer the mobile application package (APK/IPA).",
    "Search the application's source code, resource files, and configuration files for hardcoded strings that appear to be credentials, API keys, encryption keys, or other secrets.",
    "Common keywords to search for include 'password', 'secret', 'key', 'token', 'apikey', 'auth'.",
    "Analyze identified strings to confirm if they are active and sensitive credentials.",
    "Attempt to use these credentials to access protected resources or services."
]
payload = ""
screenshots = []

[proof_of_concept]
code = ""
curl_command = ""

[remediation]
recommendation = "Never hardcode credentials, API keys, or other secrets directly in the mobile application's code or configuration files. For server-side API keys, the mobile app should authenticate to a backend service, which then uses the API keys to communicate with third-party services. For user credentials, use secure authentication mechanisms (e.g., OAuth2) and store tokens securely using platform-provided secure storage (Keystore/Keychain). If client-side secrets are unavoidable (e.g., for some SDK initializations), ensure they have minimal privileges and consider using techniques like code obfuscation and runtime secret fetching from a secure server, though these are not foolproof."
code_fix = ""
estimated_effort = ""
timeline = ""

[references]
cve_ids = []
external_references = [
    "https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography",
    "https://cwe.mitre.org/data/definitions/798.html"
]
internal_references = []

[communication]
disclosed_to = ""
disclosed_on = ""
response = ""

[tracking]
issue_tracker_id = ""
pull_request = ""
fix_version = ""
fix_date = ""
verification_date = ""

[compliance]
regulatory_impact = []
business_impact = ""
data_breach_risk = false

[additional_info]
notes = ""
tags = []
linked_findings = []
